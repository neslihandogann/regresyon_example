# -*- coding: utf-8 -*-
"""coklulineerregresyon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MsN0sMdYmmyXL5ZFEQySUErSa-kuS9em

**Veri Seti Adı**


**PETROL TÜKETİMİ**

veri setindeki kavramlar

Petrol_tax =petrol vergisi

Average_income=Ortalama_gelir 

Paved_Highways	=kaplamalı karayolları

Population_Driver_licence(%)	=genel sürücü ehliyeti

Petrol_Consumption=petrol tüketimi
"""

# Commented out IPython magic to ensure Python compatibility.
# Gerekli Tüm kütüphaneler import edildi.
import pandas as pd #csv formattaki veriyi almak için kullanacaz
import numpy as np # matematiksel işlemlerde hızlı hesaplamak için kullanacaz 
import matplotlib.pyplot as plt # grafik çizdirmek için kullanacaz
import seaborn as sns # veriyi görselleştirme
from sklearn.model_selection import train_test_split #Verilerimizi eğitim ve test için ayırmaya kullancaz
from sklearn import metrics # kütüphane yardımı ile MSE değerini hesaplayacaz
from sklearn.linear_model import LinearRegression #Lineer regresyon yapmak için kullanacaz katsayı hesabı için
# %matplotlib inline
plt.rcParams['figure.figsize'] = (8.0,6.0) # çıkan grafiğin boyutunu belirliyoruz

dataset = pd.read_csv('petrol_consumption.csv') #Datasetin okunması
dataset.head() #alınan veriler gösterilmesi için

dataset.describe() #Dataset dosyası hakkında istatistiksel olarak bilgi veriyor

korolesyon = dataset.corr()
sns.heatmap(korolesyon,annot=True)
plt.title("Değişkenler Arası Korelasyon")

#csv değerlerini ayırıyoruz
X = dataset[['Petrol_tax', 'Average_income', 'Paved_Highways',
       'Population_Driver_licence(%)']] #katsayıları bulunması gereken değişkenler
y = dataset['Petrol_Consumption'] #Çıkması gereken gerçek değer

#Eğitim verisi ve test datası olarak bölme işlemi yapıyoruz.
#Verimizin 5te 1i test verisi olarak ayarladık.
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train

#Eğitim verileri ile modeli oluşturmak için lineer regresyondan fit fonksiyonunu uyguluyoruz  
regresyon = LinearRegression()
regresyon.fit(X_train, y_train)

#Katsayıları bir önceki fit fonksiyonu ile hesaplanmıştı bunları listeledik.
coeff_df = pd.DataFrame(regresyon.coef_, X.columns, columns=['Katsayilar'])
coeff_df

#Modelimizi ekrana yazdırdık
print('Modelimiz => Y=', regresyon.coef_[0],'*Petrol_Tax +',regresyon.coef_[1],'*Average_income +',regresyon.coef_[2],'*Paved_Highways + ',regresyon.coef_[3],'*population_driver_licence(%)',)
#temel mantık aslında çoklu regresyonda y = mx1 + mx2 + mx3 + b

"""

```
# Y = regresyonun bağımlı değişkeni
M = regresyonun eğimi
X1 = regresyonun ilk bağımsız değişkeni
X2 = regresyonun ikinci bağımsız değişkeni
X3 = regresyonun üçüncü bağımsız değişkeni
B = sabit
```

"""

#Oluşturduğumuz modeli ile Test verisinde tahminde bulunuyoruz
y_pred = regresyon.predict(X_test)

#Oluşturduğumuz tahminler aşağıda tablo şeklinde yazdırılıyor
#Kıyaslamak için gerçek ve tahmini değeri görebiliyoruz 
df = pd.DataFrame({'Gercek': y_test, 'Tahmin': y_pred})
df

#sklearn kütüphanesi yardımıyla MSE MAE RMSE değerleri hesaplandı. 
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

sns.pairplot(dataset)#tüm veri çerçevesi boyunca, sayısal sütunlar için çift yönlü ilişkiler çizer